[
  {
    "name": "add",
    "type": "number -> number -> number",
    "function": "x => y => x + y",
    "alternative": null,
    "description": "Adds one number to another and returns the result",
    "arguments": "(1)(2)",
    "return": "3",
    "link": "subtract"
  },
  {
    "name": "and",
    "type": "boolean -> boolean -> boolean",
    "function": "x => y => x && y",
    "alternative": null,
    "description": "Returns the conjunction of two booleans",
    "arguments": "(true)(false)",
    "return": "false",
    "link": null
  },
  {
    "name": "append",
    "type": "a -> [a] -> [a]",
    "function": "x => xs => [...xs, x]",
    "alternative": "x => xs => [...xs].concat(x)",
    "description": "Appends an element onto the end of an array",
    "arguments": "(1)([1,2,3])",
    "return": "[1,2,3,1]",
    "link": null
  },
  {
    "name": "both",
    "type": "(a -> boolean) -> (a -> boolean) -> a -> boolean",
    "function": "f => g => x => f(x) && g(x)",
    "alternative": null,
    "description": "Returns the conjunction of the boolean outputs of two supplied function applications",
    "arguments": "(x => x > 1)(x => x < 10)(5)",
    "return": "true",
    "link": null
  },
  {
    "name": "chunksOf",
    "type": "number -> [a] -> [[a]]",
    "function": "x => xs => xs.reduce((acc, y, idx) => idx % x === 0 ? [...acc, [y]] : [...acc.slice(0, -1), [...acc.slice(-1)[0], y]], [])",
    "alternative": null,
    "description": "Splits an array into chunks of the supplied first argument",
    "arguments": "(2)(['a','b','c','d'])",
    "return": "[['a','b'],['c','d']]",
    "link": null
  },
  {
    "name": "compose",
    "type": "(b -> c) -> (a -> b) -> a -> c",
    "function": "(...fs) => x => fs.reduceRight((acc, f) => f(acc), x)",
    "alternative": null,
    "description": "Successively applies a list of functions to a supplied argument from right to left, where the output of each function application is the input to the next",
    "arguments": "(add(1), multiply(2))(3)",
    "return": "7",
    "link": "pipe"
  },
  {
    "name": "cons",
    "type": "a -> [a] -> [a]",
    "function": "x => xs => [x, ...xs]",
    "alternative": null,
    "description": "Constructs an array with a new head by prepending a new element, the first argument, onto an array, the second argument",
    "arguments": "(1)([2,3])",
    "return": "[1,2,3]",
    "link": null
  },
  {
    "name": "difference",
    "type": "[a] -> [a] -> [a]",
    "function": "xs => xs.reduce((a, b) => a.filter(c => !b.includes(c)))",
    "alternative": "([xs, ys]) => {const s = new Set(ys); return xs.filter(x => !s.has(x))}",
    "description": "Returns the values from the first array that are not present in the second array",
    "arguments": "([[1, 2, 3, 4, 5], [1, 3, 5]])",
    "return": "[2,4]",
    "link": "intersection"
  },
  {
    "name": "drop",
    "type": "number -> [a] -> [a]",
    "function": "n => xs => xs.slice(n)",
    "alternative": null,
    "description": "Returns an array with n elements, the first argument, dropped from the beginning",
    "arguments": "(2)([1,2,3,4,5])",
    "return": "[3,4,5]",
    "link": "take"
  },
  {
    "name": "elem",
    "type": "a -> [a] -> boolean",
    "function": "x => xs => xs.indexOf(x) !== -1",
    "alternative": "x => xs => xs.includes(x)",
    "description": "Returns a boolean value as to whether an element is in array",
    "arguments": "(1)([1,2,3])",
    "return": "True",
    "link": "notElem"
  },
  {
    "name": "enumFromTo",
    "type": "a -> a -> [a]",
    "function": "m => n => Array.from({length: Math.floor(n - m) + 1 }, (_, i) => m + i)",
    "alternative": null,
    "description": "Enumerates a range of values in an array from the supplied start and end arguments",
    "arguments": "(1)(10)",
    "return": "[1,2,3,4,5,6,7,8,9,10]",
    "link": null
  },
  {
    "name": "eq",
    "type": "a -> a -> boolean",
    "function": "x => y => x == y",
    "alternative": null,
    "description": "Returns a boolean value as to whether two arguments are equal",
    "arguments": "(1)(1)",
    "return": "true",
    "link": null
  },
  {
    "name": "filter",
    "type": "(a -> boolean) -> [a] -> [a]",
    "function": "p => xs => xs.filter(p)",
    "alternative": "p => xs => xs.reduce((acc, x) => p(x) ? acc.concat(x) : acc, [])",
    "description": "Returns an array that satisfies a predicate supplied as the first argument",
    "arguments": "(x => x > 3)([1,2,3,4,5])",
    "return": "[4,5]",
    "link": null
  },
  {
    "name": "flip",
    "type": "(a -> b -> c) -> b -> a -> c",
    "function": "f => x => y => f(y)(x)",
    "alternative": null,
    "description": "Flips the order of arguments",
    "arguments": "(x => y => x / y)(2)(4)",
    "return": "2",
    "link": null
  },
  {
    "name": "gt",
    "type": "number -> number -> boolean",
    "function": "x => y => x > y",
    "alternative": null,
    "description": "Returns true if first argument is greater than second, false otherwise",
    "arguments": "(3)(2)",
    "return": "true",
    "link": "lt"
  },
  {
    "name": "head",
    "type": "[a] -> a",
    "function": "xs => xs[0]",
    "alternative": "([x, ...xs]) =>  x",
    "description": "Returns the first element of an array",
    "arguments": "([1,2,3])",
    "return": "1",
    "link": "last"
  },
  {
    "name": "id",
    "type": "a -> a",
    "function": "x => x",
    "alternative": null,
    "description": "Returns the argument supplied",
    "arguments": "(1)",
    "return": "1",
    "link": null
  },
  {
    "name": "init",
    "type": "[a] -> [a]",
    "function": "xs => xs.slice(0, xs.length - 1)",
    "alternative": "xs => xs.reduce((acc,x,i,arr) => i < arr.length -1 ? acc.concat(x) : acc, [])",
    "description": "Returns the supplied array without its last element",
    "arguments": "([1,2,3])",
    "return": "[1,2]",
    "link": null
  },
  {
    "name": "intersection",
    "type": "[a] -> [a] -> [a]",
    "function": "xs => xs.reduce((a, b) => a.filter(c => b.includes(c)))",
    "alternative": "([xs, ys]) => {const s = new Set(ys); return xs.filter(x => s.has(x))}",
    "description": "Returns the values that are present in every supplied array",
    "arguments": "([[1, 10, 2, 11, 3], [4, 1, 5, 2, 6, 3], [7, 2, 8, 1, 9, 3]])",
    "return": "[1,2,3]",
    "link": "difference"
  },
  {
    "name": "k",
    "type": "a -> b -> a",
    "function": "x => _ => x",
    "alternative": null,
    "description": "Returns the first argument supplied",
    "arguments": "(1)(2)",
    "return": "1",
    "link": null
  },
  {
    "name": "last",
    "type": "[a] -> a",
    "function": "xs => xs.slice(-1)[0]",
    "alternative": null,
    "description": "Returns the last element in an array",
    "arguments": "([1,2,3])",
    "return": "3",
    "link": null
  },
  {
    "name": "length",
    "type": "[a] -> number",
    "function": "xs => xs.length",
    "alternative": "xs => xs.map(x => x = 1).reduce((acc,x) => acc + x)",
    "description": "Returns the length of an array",
    "arguments": "([1,2,3])",
    "return": "3",
    "link": null
  },
  {
    "name": "lt",
    "type": "number -> number -> boolean",
    "function": "x => y => x < y",
    "alternative": null,
    "description": "Returns true if first argument is smaller than second, false otherwise",
    "arguments": "(2)(3)",
    "return": "true",
    "link": "gt"
  },
  {
    "name": "map",
    "type": "(a -> b) -> [a] -> [b]",
    "function": "f => xs => xs.map(f)",
    "alternative": "f => xs => xs.reduce((acc, x) => [...acc, f(x)], [])",
    "description": "Applies a function to each element in an array and returns a new array of transformed values",
    "arguments": "(inc)([1,2,3])",
    "return": "[2,3,4]",
    "link": null
  },
  {
    "name": "multiply",
    "type": "number -> number -> number",
    "function": "x => y => x * y",
    "alternative": null,
    "description": "Multiplies together two numbers and returns the result",
    "arguments": "(2)(3)",
    "return": "6",
    "link": null
  },
  {
    "name": "notElem",
    "type": "a -> [a] -> boolean",
    "function": "x => xs => xs.indexOf(x) === -1",
    "alternative": "x => xs => !xs.includes(x)",
    "description": "Returns boolean value as to whether element is not in array",
    "arguments": "(1)([2,3,4])",
    "return": "true",
    "link": "elem"
  },
  {
    "name": "nub",
    "type": "[a] -> [a]",
    "function": "xs => xs.filter((x, i) => xs.indexOf(x) === i)",
    "alternative": "xs => [...new Set(xs)]",
    "description": "Removes duplicate elements from a list",
    "arguments": "([1,2,2,3,3,3])",
    "return": "[1,2,3]",
    "link": null
  },
  {
    "name": "or",
    "type": "boolean -> boolean -> boolean",
    "function": "x => y => x || y",
    "alternative": null,
    "description": "Returns the conjunction of two booleans",
    "arguments": "(true)(false)",
    "return": "true",
    "link": null
  },
  {
    "name": "pipe",
    "type": "(a -> b) -> (b -> c) -> a -> c",
    "function": "(...fs) => x => fs.reduce((acc, f) => f(acc), x)",
    "alternative": null,
    "description": "Successively applies a list of functions to an argument from left to right, where the output of each function application is the input to the next",
    "arguments": "(add(1), multiply(2))(3)",
    "return": "8",
    "link": "compose"
  },
  {
    "name": "prop",
    "type": "(a -> b) -> (b -> c) -> a -> c",
    "function": "p => o => o[p]",
    "alternative": null,
    "description": "Returns a value that when supplied an object returns the indicated property of that object",
    "arguments": "('x')({x: 1})",
    "return": "1",
    "link": null
  },
  {
    "name": "reverse",
    "type": "[a] -> [a]",
    "function": "xs => xs.reverse()",
    "alternative": "xs => xs.reduce((acc,x) => [x].concat(acc), [])",
    "description": "Reverses supplied array",
    "arguments": "([1,2,3])",
    "return": "[3,2,1]",
    "link": null
  },
  {
    "name": "subtract",
    "type": "number -> number -> number",
    "function": "x => y => x - y",
    "alternative": null,
    "description": "Subtracts one number from another and returns the result",
    "arguments": "(3)(2)",
    "return": "1",
    "link": "add"
  },
  {
    "name": "tail",
    "type": "[a] -> [a]",
    "function": "xs => xs.length ? xs.slice(-(xs.length - 1)) : undefined",
    "alternative": "([x, ...xs]) =>  xs",
    "description": "Returns supplied array without the first element",
    "arguments": "([1,2,3,4])",
    "return": "[2,3,4]",
    "link": "head"
  },
  {
    "name": "take",
    "type": "number -> [a] -> [a]",
    "function": "n => xs => xs.slice(0, n)",
    "alternative": null,
    "description": "Returns an array with n elements taken from the beginning",
    "arguments": "(3)([1,2,3,4,5])",
    "return": "[1,2,3]",
    "link": "drop"
  },
  {
    "name": "unwords",
    "type": "[string] -> string",
    "function": "xs => xs.join(' ')",
    "alternative": null,
    "description": "Takes an array of strings and creates a string where the space characters are joiners",
    "arguments": "(['hello', 'world'])",
    "return": "'hello world'",
    "link": "words"
  },
  {
    "name": "words",
    "type": "string -> [string]",
    "function": "s => s.split(' ')",
    "alternative": null,
    "description": "Takes a string and creates an array of words where the space characters are separators",
    "arguments": "('hello world')",
    "return": "['hello', 'world']",
    "link": "unwords"
  },
  {
    "name": "zip",
    "type": "[a] -> [b] -> [(a,b)]",
    "function": "([xs,ys]) => xs.map((x,i) => [x,ys[i]])",
    "alternative": null,
    "description": "Takes an array of two arrays and returns an array of tuples whose elements are of corresponding index position",
    "arguments": "([[1,2,3,4],[5,6,7,8]])",
    "return": "[[1,5],[2,6],[3,7],[4,8]]",
    "link": null
  }
]
