[
  {
    "name": "add",
    "type": "Number -> Number -> Number",
    "function": "const add = x => y => x + y",
    "alternative": null,
    "description": "Adds one number to another and returns the result",
    "application": "add(1)(2)",
    "return": "3",
    "link": "subtract"
  },
  {
    "name": "compose",
    "type": "(b -> c) -> (a -> b) -> a -> c",
    "function": "const compose = (...fs) => x => [...fs].reduceRight((acc, f) => f(acc), x)",
    "alternative": null,
    "description": "Successively applies a list of functions to an argument from right to left, where the output of each function application is the input to the next",
    "application": "compose(add(1), multiply(2))(3)",
    "return": "7",
    "link": "pipe"
  },
  {
    "name": "head",
    "type": "[a] -> a",
    "function": "const head = xs => xs.length ? xs[0] : undefined",
    "alternative": "const head = ([x,...xs]) =>  x",
    "description": "Returns the first element of an array",
    "application": "head([1,2,3])",
    "return": "1",
    "link": null
  },
  {
    "name": "id",
    "type": "a -> a",
    "function": "const id = x => x",
    "alternative": null,
    "description": "Returns the argument supplied",
    "application": "id(1)",
    "return": "1",
    "link": null
  },
  {
    "name": "map",
    "type": "(a -> b) -> [a] -> [b]",
    "function": "const map = f => xs => xs.map(f)",
    "alternative": "const map = f => xs => xs.reduce((acc, x) => [...acc, f(x)], [])",
    "description": "Applies a function to each element in an array and returns a new array of transformed values",
    "application": "map(inc)([1,2,3])",
    "return": "[2,3,4]",
    "link": null
  },
  {
    "name": "multiply",
    "type": "Number -> Number -> Number",
    "function": "const multiply = x => y => x * y",
    "alternative": null,
    "description": "Multiplies together two numbers and returns the result",
    "application": "multiply(2)(3)",
    "return": "6",
    "link": null
  },
  {
    "name": "nub",
    "type": "[a] -> [a]",
    "function": "const nub = xs => [...new Set(xs)]",
    "alternative": "const nub = xs => xs.filter((x, i) => xs.indexOf(x) === i)",
    "description": "Removes duplicate elements from a list",
    "application": "nub([1,2,2,3,3,3])",
    "return": "[1,2,3]",
    "link": null
  },
  {
    "name": "pipe",
    "type": "(a -> b) -> (b -> c) -> a -> c",
    "function": "const pipe = (...fs) => x => [...fs].reduce((acc, f) => f(acc), x)",
    "alternative": null,
    "description": "Successively applies a list of functions to an argument from left to right, where the output of each function application is the input to the next",
    "application": "compose(add(1), multiply(2))(3)",
    "return": "8",
    "link": "compose"
  },
  {
    "name": "subtract",
    "type": "Number -> Number -> Number",
    "function": "const subtract = x => y => x - y",
    "alternative": null,
    "description": "Subtracts one number from another and returns the result",
    "application": "subtract(3)(2)",
    "return": "1",
    "link": null
  }
]
